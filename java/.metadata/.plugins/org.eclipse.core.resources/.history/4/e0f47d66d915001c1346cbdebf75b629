package book;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import utility.DBClose;
import utility.Open;

public class BookTest {

	public static void main(String[] args) {
		BookDTO dto = new BookDTO(21424, "Java Basic", "김하나", "Jaen.kr", 15000, "Java 기본 문법");
//		BookDTO dto2 = new BookDTO(33455, "JDBC Pro", "김철수", "Jaen.kr", 23000);
//		BookDTO dto3 = new BookDTO(55355, "Servlet/JSP", "박자바", "Jaen.kr", 41000, "Model2 기반");
//		BookDTO dto4 = new BookDTO(35332, "Android App", "홍길동", "Jaen.kr", 25000, "Lightweight Framework");
//		BookDTO dto5 = new BookDTO(35355, "OOAD 분석, 설계", "소나무", "Jaen.kr", 30000);
//		p("*********************** 도서 목록 ***********************");
//		p(dto.toString());
//		p(dto2.toString());
//		p(dto3.toString());
//		p(dto4.toString());
//		p(dto5.toString());
		
		createTable();
		
		insertStudent(dto);
		
		printAllBooks();
	}
	
	public static void createTable() {
		Connection con = Open.getConnection();
		PreparedStatement prst = null;
		StringBuffer sql = new StringBuffer();
		
		sql.append("CREATE TABLE books ("
				+ "isbn number(5) primary key, "
				+ "title varchar2(50) not null, "
				+ "author varchar2(250) not null, "
				+ "publisher varchar2(50) not null, "
				+ "price number(6) not null, "
				+ "info varchar2(200), "
				+ "publish_date varchar2(10)) ");
		try {
			prst = con.prepareStatement(sql.toString());
		} catch (SQLException e) {
			e.printStackTrace();
		}finally {
			DBClose.close(prst, con);
		}
	}

	public static void insertStudent(BookDTO book) {
		Connection con = Open.getConnection();
		PreparedStatement prst = null;
		StringBuffer sql = new StringBuffer();

		sql.append("INSERT INTO books (isbn, title, author, publisher, price, info) ");
		sql.append("values(?,?,?,?,?,?)");
		try {
			prst = con.prepareStatement(sql.toString());
			prst.setInt(1, book.getIsbn());
			prst.setString(2, book.getTitle());
			prst.setString(3, book.getAuthor());
			prst.setString(4, book.getPublisher());
			prst.setInt(5, book.getPrice());
			prst.setString(6, book.getInfo());

			int cnt = prst.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
			
		} finally {
			DBClose.close(prst, con);
		}
	}

	public static void printAllBooks() {
		List<BookDTO> list = list();

		p("*********************** 도서 목록 ***********************");
		for (int i = 0; i < list.size(); i++) {
			BookDTO book = list.get(i);
			p(book.toString());
		}
	}

	public static List<BookDTO> list() {
		List<BookDTO> list = new ArrayList<>();
		Connection con = Open.getConnection();
		PreparedStatement prst = null;
		StringBuffer sql = new StringBuffer();
		ResultSet rs = null;

		sql.append("select * ");
		sql.append("from books");
		try {
			prst = con.prepareStatement(sql.toString());
			rs = prst.executeQuery();
			while (rs.next()) {
				BookDTO book = new BookDTO();
				book.setIsbn(rs.getInt("idbn"));
				book.setTitle(rs.getString("title"));
				book.setAuthor(rs.getString("author"));
				book.setPublisher(rs.getString("publisher"));
				book.setPrice(rs.getInt("price"));
				book.setInfo(rs.getString("info"));

				list.add(book);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBClose.close(prst, con, rs);
		}

		return list;
	}
	private static void p(String s) {
		System.out.println(s);
	}
}
